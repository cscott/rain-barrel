.program smrty

; Keep a timer running every 3 cycles; record transition times in the FIFO

notlow:
    jmp HwaitL
public start:
LwaitH:
.wrap_target
    jmp y-- next1
next1:
    jmp pin ishigh
    jmp LwaitH
ishigh:
    in y, 32
HwaitL:
    jmp y-- next2
next2:
    jmp pin notlow
islow:
    in y, 32
.wrap

; push the (synchronized) timer value to the FIFO if the pin is idle
; (which in this case is high) too long (0x0800 0000 counts)
.program watchdog
public start:
notidle:
    jmp y-- next3
next3:
    jmp pin newly_idle
    jmp notidle

    ; start of loop counting cycles that the pin is high
resetx:
    jmp y-- next4
next4:
    ; set x to 0x0800 0000, which is 27s
    ; this is actually the smallest large number we can set!
    set x,16
    mov x,::x
keep_going:
    jmp y-- next5
next5:
    jmp pin stillidle
    jmp notidle
stillidle:
    jmp x-- keep_going
    jmp y-- next6
next6:
    in y, 32 ; inform our host that we've timed out!
newly_idle:
    jmp resetx

% c-sdk {
static inline void smrty_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_sm_config c = smrty_program_get_default_config(offset);

    // Map the state machine's JMP pin group to the `pin`
    // parameter to this function.
    sm_config_set_in_pins(&c, pin); // for WAIT
    sm_config_set_jmp_pin(&c, pin); // for JMP
    // Set the pin direction to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // auto-push enabled
    sm_config_set_in_shift(&c, false, true, 32);
    // deeper fifo as we're not doing any TX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // one clock per 3 execution cycles
    int cycles_per_sample = 3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_sample);
    sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset + smrty_offset_start, &c);

    // set y to 0 before beginning.
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, 0));

    // We're deliberately not starting the state machine; we're going
    // to do that in sync w/ the watchdog program in the caller.
}

static inline void watchdog_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_sm_config c = watchdog_program_get_default_config(offset);

    // Map the state machine's JMP pin group to the `pin`
    // parameter to this function.
    sm_config_set_in_pins(&c, pin); // for WAIT
    sm_config_set_jmp_pin(&c, pin); // for JMP
    // Set the pin direction to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // auto-push enabled
    sm_config_set_in_shift(&c, false, true, 32);
    // deeper fifo as we're not doing any TX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // one clock per 3 execution cycles
    int cycles_per_sample = 3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_sample);
    sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset + watchdog_offset_start, &c);

    // set y to 0 before beginning.
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, 0));

    // We're deliberately not starting the state machine; we're going
    // to do that in sync w/ the smrty program in the caller.
}
%}
