// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// smrty //
// ----- //

#define smrty_wrap_target 1
#define smrty_wrap 7

#define smrty_offset_start 1u

static const uint16_t smrty_program_instructions[] = {
    0x0005, //  0: jmp    5                          
            //     .wrap_target
    0x0082, //  1: jmp    y--, 2                     
    0x00c4, //  2: jmp    pin, 4                     
    0x0001, //  3: jmp    1                          
    0x4040, //  4: in     y, 32                      
    0x0086, //  5: jmp    y--, 6                     
    0x00c0, //  6: jmp    pin, 0                     
    0x4040, //  7: in     y, 32                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program smrty_program = {
    .instructions = smrty_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config smrty_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + smrty_wrap_target, offset + smrty_wrap);
    return c;
}

static inline void smrty_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_sm_config c = smrty_program_get_default_config(offset);
    // Map the state machine's JMP pin group to the `pin`
    // parameter to this function.
    sm_config_set_in_pins(&c, pin); // for WAIT
    sm_config_set_jmp_pin(&c, pin); // for JMP
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // Set the pin direction to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // auto-push enabled
    sm_config_set_in_shift(&c, false, true, 32);
    // deeper fifo as we're not doing any TX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // one clock per 4 execution cycles
    int cycles_per_sample = 3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_sample);
    sm_config_set_clkdiv(&c, div);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset + smrty_offset_start, &c);
    // set y to 0 before beginning.
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, 0));
    // since this starts in the "low waiting for high" state, wait for low
    // before beginning the program.
    pio_sm_exec(pio, sm, pio_encode_wait_pin(0/*polarity*/, 0/*pin*/));
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif
